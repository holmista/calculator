{"version":3,"sources":["numbers.jsx","App.js","reportWebVitals.js","index.js"],"names":["Button","props","className","onClick","function","value","globalarray","App","buttons","numsarray","map","elem","i","id","tempvar","push","String","console","log","setState","currentcalcs","join","multiply","secondlast","length","divide","plus","minus","calculateAndShow","result","math","clear","state","calculations","this","React","Component","reportWebVitals","onPerfEntry","Function","then","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"8SAWeA,EARA,SAACC,GACZ,OACG,wBAAQC,UAAU,cAAcC,QAASF,EAAMG,SAA/C,SACKH,EAAMI,SCEdC,EAAc,GAmHHC,E,kDAhHb,aAAc,IAAD,8BACX,gBAeFC,QAAU,WASR,OARQ,EAAKC,UAAUC,KAAI,SAACC,EAAKC,GAAN,OACzB,cAAC,EAAD,CAAQC,GAAID,EAAGP,MAAOM,EAAMP,SAAU,WACpC,IAAIU,EAAUR,EAAYS,KAAKC,OAAOL,IAGtC,OAFAM,QAAQC,IAAIZ,GACZ,EAAKa,SAAS,CAACC,aAAcd,EAAYe,KAAK,MACvCP,SAtBA,EA6BbQ,SAAW,WACT,IAAIC,EAAajB,EAAYA,EAAYkB,OAAO,GAC/B,KAAdD,GAAmC,KAAdA,GAAmC,KAAdA,GAAqBA,GAChEjB,EAAYS,KAAK,KAEnB,EAAKI,SAAS,CAACC,aAAcd,EAAYe,KAAK,OAlCnC,EAqCbI,OAAS,WACP,IAAIF,EAAajB,EAAYA,EAAYkB,OAAO,GAC/B,KAAdD,GAAmC,KAAdA,GAAmC,KAAdA,GAAmC,KAAdA,GAChEjB,EAAYS,KAAK,KAEnB,EAAKI,SAAS,CAACC,aAAcd,EAAYe,KAAK,OA1CnC,EA6CbK,KAAO,WACL,IAAIH,EAAajB,EAAYA,EAAYkB,OAAO,GAC/B,KAAdD,GAAmC,KAAdA,GAAmC,KAAdA,GAAmC,KAAdA,GAChEjB,EAAYS,KAAK,KAEnB,EAAKI,SAAS,CAACC,aAAcd,EAAYe,KAAK,OAlDnC,EAqDbM,MAAQ,WACN,IAAIJ,EAAajB,EAAYA,EAAYkB,OAAO,GAC/B,KAAdD,GAAmC,KAAdA,GAAmC,KAAdA,GAAmC,KAAdA,GAChEjB,EAAYS,KAAK,KAEnB,EAAKI,SAAS,CAACC,aAAcd,EAAYe,KAAK,OA1DnC,EA6DbO,iBAAmB,WAGjB,EAAKT,SAAS,CAACU,OAAQC,IAAcxB,EAAYe,KAAK,QAhE3C,EAmEbU,MAAQ,WACN,EAAKZ,SAAS,CAACU,OAAQ,KACvBvB,EAAc,GACd,EAAKa,SAAS,CAACC,aAAcd,EAAYe,KAAK,OApE9C,EAAKW,MAAQ,CACXC,aAAc,GACdJ,OAAQ,GACRT,aAAc,IAEhB,EAAKX,UAAY,CACf,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,GART,E,0CAyEb,WAGE,OADAQ,QAAQC,IAAIZ,GAEV,qBAAKJ,UAAU,SAAf,SAEI,qBAAKA,UAAU,YAAf,SACE,sBAAKA,UAAU,gBAAf,UACA,sBAAKA,UAAU,UAAf,UACI,sBAAKA,UAAU,eAAf,UACE,qBAAKA,UAAU,eAAf,SAA+BgC,KAAKF,MAAMZ,eAC1C,qBAAKlB,UAAU,SAAf,SAAyBgC,KAAKF,MAAMH,YAEtC,wBAAQ1B,QAAS+B,KAAKH,MAAO7B,UAAU,cAAvC,sBAGF,sBAAKA,UAAU,WAAf,UACKgC,KAAK1B,UACV,wBAAQN,UAAU,cAAcC,QAAS+B,KAAKN,iBAA9C,kBAGE,sBAAK1B,UAAU,YAAf,UACE,wBAAQA,UAAU,iBAAiBC,QAAS+B,KAAKZ,SAAjD,eACA,wBAAQpB,UAAU,iBAAiBC,QAAS+B,KAAKT,OAAjD,eACA,wBAAQvB,UAAU,iBAAiBC,QAAS+B,KAAKR,KAAjD,eACA,wBAAQxB,UAAU,iBAAiBC,QAAS+B,KAAKP,MAAjD,6B,GAnGAQ,IAAMC,WCETC,EAZS,SAAAC,GAClBA,GAAeA,aAAuBC,UACxC,6BAAqBC,MAAK,YAAkD,IAA/CC,EAA8C,EAA9CA,OAAQC,EAAsC,EAAtCA,OAAQC,EAA8B,EAA9BA,OAAQC,EAAsB,EAAtBA,OAAQC,EAAc,EAAdA,QAC3DJ,EAAOH,GACPI,EAAOJ,GACPK,EAAOL,GACPM,EAAON,GACPO,EAAQP,OCDdQ,IAASC,OACP,cAAC,IAAMC,WAAP,UACE,cAAC,EAAD,MAEFC,SAASC,eAAe,SAM1Bb,M","file":"static/js/main.3b2f496d.chunk.js","sourcesContent":["import React from \"react\"\r\nimport \"./numbers.style.css\" \r\n\r\nconst Button = (props) => {\r\n    return(\r\n       <button className=\"buttonstyle\" onClick={props.function}>\r\n           {props.value}\r\n       </button>\r\n    )\r\n}\r\n\r\nexport default Button","\nimport './App.css';\nimport React from \"react\"\nimport * as math from \"mathjs\"\nimport Button from \"./numbers.jsx\"\n\n\n\nvar globalarray = []\n\nclass App extends React.Component {\n  constructor(){\n    super()\n    this.state = {\n      calculations: [],\n      result: \"\",\n      currentcalcs: \"\"\n    }\n    this.numsarray = [\n      0,1,2,3,4,5,6,7,8,9\n    ]\n  }\n\n \n\n\n\n  buttons = () => {\n    var a = this.numsarray.map((elem,i) => (\n      <Button id={i} value={elem} function={() => {\n        let tempvar = globalarray.push(String(elem))\n        console.log(globalarray)\n        this.setState({currentcalcs: globalarray.join(\"\")})\n        return tempvar}\n      }></Button>\n    ))\n    return a\n  }\n\n\n  multiply = () => {\n    let secondlast = globalarray[globalarray.length-1]\n    if(secondlast != \"-\" && secondlast != \"+\" && secondlast != \"/\" && secondlast && \"*\"){\n      globalarray.push(\"*\")\n    }  \n    this.setState({currentcalcs: globalarray.join(\"\")})\n  }\n\n  divide = () => {\n    let secondlast = globalarray[globalarray.length-1]\n    if(secondlast != \"-\" && secondlast != \"+\" && secondlast != \"/\" && secondlast != \"*\"){\n      globalarray.push(\"/\")\n    }  \n    this.setState({currentcalcs: globalarray.join(\"\")})\n  }\n\n  plus = () => {\n    let secondlast = globalarray[globalarray.length-1]\n    if(secondlast != \"-\" && secondlast != \"+\" && secondlast != \"/\" && secondlast != \"*\"){\n      globalarray.push(\"+\")\n    }  \n    this.setState({currentcalcs: globalarray.join(\"\")})\n  }\n\n  minus = () => {\n    let secondlast = globalarray[globalarray.length-1]\n    if(secondlast != \"-\" && secondlast != \"+\" && secondlast != \"/\" && secondlast != \"*\"){\n      globalarray.push(\"-\")\n    }\n    this.setState({currentcalcs: globalarray.join(\"\")})\n  }\n\n  calculateAndShow = () => {\n    // let a = globalarray.join(\"\")\n    // let result = math.evaluate(a)\n    this.setState({result: math.evaluate(globalarray.join(\"\"))})\n  }\n\n  clear = () => {\n    this.setState({result: \"\"})\n    globalarray = []\n    this.setState({currentcalcs: globalarray.join(\"\")})\n  }\n\n  render(){\n    \n    console.log(globalarray)\n    return (\n      <div className='parent'>\n        \n          <div className=\"buttonpad\">\n            <div className=\"numberdisplay\">\n            <div className=\"wrapper\">\n                <div className=\"resultparent\">\n                  <div className=\"currentcalcs\">{this.state.currentcalcs}</div>\n                  <div className=\"result\">{this.state.result}</div>\n                </div>\n                <button onClick={this.clear} className=\"clearbutton\">Clear</button>\n              </div>\n\n              <div className=\"onlyleft\">\n                  {this.buttons()}\n              <button className=\"equalbutton\" onClick={this.calculateAndShow}>=</button>\n              </div>   \n\n                <div className=\"onlyright\">\n                  <button className=\"functionbutton\" onClick={this.multiply}>x</button>\n                  <button className=\"functionbutton\" onClick={this.divide}>/</button>\n                  <button className=\"functionbutton\" onClick={this.plus}>+</button>\n                  <button className=\"functionbutton\" onClick={this.minus}>-</button>\n                </div>\n        \n            </div>  \n        </div>\n      </div>\n      // <div class=\"resptest\">\n\n      // </div>\n      \n    )\n  }\n}\n\nexport default App;\n","const reportWebVitals = onPerfEntry => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}